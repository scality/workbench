
services:
  # setup:
  #   build:
  #     context: ./config/setup
  #   container_name: workbench-setup
  #   network_mode: host
  #   profiles:
  #     - base

  metadata-s3:
    image: ${METADATA_S3_IMAGE}
    container_name: workbench-metadata-s3
    network_mode: host
    volumes:
      - ./config/metadata-s3/config.json:/mnt/standalone_workdir/config.json:ro
    profiles:
      - base

  metadata-scuba:
    image: ${METADATA_SCUBA_IMAGE}
    container_name: workbench-metadata-scuba
    network_mode: host
    volumes:
      - ./config/metadata-scuba/config.json:/mnt/standalone_workdir/config.json:ro
    profiles:
      - feature-scuba

  s3-data:
    image: ${CLOUDSERVER_IMAGE}
    container_name: workbench-s3-data
    network_mode: host
    command: node dataserver.js
    volumes:
      - ./config/cloudserver/config.json:/conf/config.json:ro
    profiles:
      - base

  cloudserver:
    image: ${CLOUDSERVER_IMAGE}
    container_name: workbench-s3
    network_mode: host
    command: node index.js
    environment:
      S3DATA: file
      S3METADATA: scality
      S3VAULT: scality
      BUCKETD_BOOTSTRAP: localhost:9000
      S3_CONFIG_FILE: /conf/config.json
      MPU_TESTING: 'yes'
      ENABLE_NULL_VERSION_COMPAT_MODE: ${CLOUDSERVER_ENABLE_NULL_VERSION_COMPAT_MODE}
    volumes:
      - ./config/cloudserver/config.json:/conf/config.json:ro
    profiles:
      - base

  vault:
    image: ${VAULT_IMAGE}
    container_name: workbench-vault
    network_mode: host
    command: sh -c "chmod 400 tests/utils/keyfile && yarn start"
    environment:
      VAULT_DB_BACKEND: LEVELDB
    volumes:
      - ./config/vault/config.json:/conf/config.json:ro
    healthcheck:
      test: ["CMD-SHELL", "curl -o /dev/null http://127.0.0.1:8500/_/healthcheck"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    profiles:
      - base

  setup-vault:
    build:
      context: ./config/vault
      dockerfile: Dockerfile.setup
      args:
        BASE_IMAGE: ${VAULT_IMAGE}
    container_name: workbench-setup-vault
    network_mode: host
    volumes:
      - ./config/vault/management-creds.json:/conf/management-creds.json:ro
    depends_on:
      vault:
        condition: service_healthy
    profiles:
      - base

  scuba:
    image: ${SCUBA_IMAGE}
    container_name: workbench-scuba
    network_mode: host
    environment:
      SUPERVISORD_CONF: 'supervisord.conf'
    profiles:
      - feature-scuba
    volumes:
      - ./config/scuba/env:/conf/env:ro
      - ./config/scuba/supervisord.conf:/conf/supervisord.conf:ro
      - ./config/scuba/config.json:/conf/config.json:ro
      - ./logs/scuba:/logs

  setup-scuba:
    build:
      context: ./config/scuba
      dockerfile: Dockerfile.setup
      args:
        BASE_IMAGE: ${SCUBA_IMAGE}
    container_name: workbench-setup-scuba
    network_mode: host
    depends_on:
      setup-vault:
        condition: service_completed_successfully
    volumes:
      - ./config/vault/:/secrets
    profiles:
      - feature-scuba

  backbeat:
    image: ${BACKBEAT_IMAGE}
    container_name: workbench-backbeat
    network_mode: host
    environment:
      SUPERVISORD_CONF: supervisord.conf
      BACKBEAT_CONFIG_FILE: /conf/config.json
    volumes:
      - ./config/backbeat/supervisord.conf:/conf/supervisord.conf:ro
      - ./config/backbeat/config.json:/conf/config.json:ro
      - ./config/backbeat/config.notification.json:/conf/config.notification.json:ro
      - ./config/backbeat/env:/conf/env:ro
      - ./logs/backbeat:/logs
    profiles:
      - feature-crr
      - feature-notifications

  redis:
    image: ${REDIS_IMAGE}
    container_name: workbench-redis
    network_mode: host
    profiles:
      - feature-crr
      - feature-notifications
      - feature-utapi

  zookeeper:
    build:
      context: ./config/kafka
    restart: on-failure
    container_name: workbench-zookeeper
    network_mode: host
    command: /opt/kafka/bin/zookeeper-server-start.sh /opt/kafka/config/zookeeper.properties
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - ./config/kafka/zookeeper.properties:/opt/kafka/config/zookeeper.properties:ro
      - ./data/zookeeper:/data
    profiles:
      - feature-crr
      - feature-notifications

  kafka:
    build:
      context: ./config/kafka
    restart: on-failure
    container_name: workbench-kafka
    network_mode: host
    command: /opt/kafka/bin/kafka-server-start.sh /opt/kafka/config/server.properties
    volumes:
      - ./config/kafka/server.backbeat.properties:/opt/kafka/config/server.properties:ro
      - ./data/kafka:/data
    profiles:
      - feature-crr
      - feature-notifications

  setup-kafka:
    build:
      context: ./config/kafka
    container_name: workbench-setup-kafka
    command: /usr/local/bin/setup-kafka.sh
    network_mode: host
    environment:
      KAFKA_PORT: '9092'
      TOPICS_TO_CREATE: backbeat-lifecycle-bucket-tasks backbeat-lifecycle-object-tasks backbeat-bucket-notification
      CREATE_NOTIFICATION_PATHS: 'true'
      ZOOKEEPER_ENDPOINT: 127.0.0.1:2181/backbeat
    depends_on:
      setup-vault:
        condition: service_completed_successfully
    profiles:
      - feature-crr
      - feature-notifications

  kafka-destination:
    build:
      context: ./config/kafka
    restart: on-failure
    container_name: workbench-kafka-destination
    network_mode: host
    command: /opt/kafka/bin/kafka-server-start.sh /opt/kafka/config/server.properties
    profiles:
      - feature-notifications
    volumes:
      - ./config/kafka/server.destination.properties:/opt/kafka/config/server.properties:ro
      - ./config/kafka/config.properties:/opt/kafka/config/config.properties:ro
      - ./data/kafka-destination:/data

  setup-kafka-destination:
    build:
      context: ./config/kafka
    container_name: workbench-setup-kafka-destination
    environment:
      TOPICS_TO_CREATE: notifications
      KAFKA_PORT: '9094'
      JAAS_CONFIG: '/opt/kafka/config/config.properties'
    network_mode: host
    command: /usr/local/bin/setup-kafka.sh
    profiles:
      - feature-notifications
    volumes:
      - ./config/kafka/config.properties:/opt/kafka/config/config.properties:ro

  utapi:
    profiles:
      - feature-utapi
    image: ${UTAPI_IMAGE}
    container_name: workbench-utapi
    network_mode: host
    command: ["bash", "-c", "yarn start"]
    volumes:
      - ./config/utapi/config.json:/conf/config.json:ro
    environment:
      UTAPI_CONFIG_FILE: /conf/config.json
